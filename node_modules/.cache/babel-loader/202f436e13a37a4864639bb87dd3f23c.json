{"ast":null,"code":"\"use strict\";\n\nvar _extends = Object.assign || function (a) {\n  for (var c, b = 1; b < arguments.length; b++) {\n    for (var d in c = arguments[b], c) {\n      Object.prototype.hasOwnProperty.call(c, d) && (a[d] = c[d]);\n    }\n  }\n\n  return a;\n},\n    _react = require(\"react\"),\n    _react2 = _interopRequireDefault(_react),\n    _deepIs = require(\"deep-is\"),\n    _deepIs2 = _interopRequireDefault(_deepIs),\n    _clone = require(\"clone\"),\n    _clone2 = _interopRequireDefault(_clone),\n    _propTypes = require(\"prop-types\"),\n    _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Mathmax = Math.max,\n    _Mathmin = Math.min;\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\n\nfunction _interopRequireDefault(a) {\n  return a && a.__esModule ? a : {\n    default: a\n  };\n}\n\nfunction _objectWithoutProperties(a, b) {\n  var c = {};\n\n  for (var d in a) {\n    0 <= b.indexOf(d) || Object.prototype.hasOwnProperty.call(a, d) && (c[d] = a[d]);\n  }\n\n  return c;\n}\n\nfunction _classCallCheck(a, b) {\n  if (!(a instanceof b)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\nfunction _possibleConstructorReturn(a, b) {\n  if (!a) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return b && (\"object\" == typeof b || \"function\" == typeof b) ? b : a;\n}\n\nfunction _inherits(a, b) {\n  if (\"function\" != typeof b && null !== b) throw new TypeError(\"Super expression must either be null or a function, not \" + typeof b);\n  a.prototype = Object.create(b && b.prototype, {\n    constructor: {\n      value: a,\n      enumerable: !1,\n      writable: !0,\n      configurable: !0\n    }\n  }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);\n}\n\nvar TableDragSelect = function (a) {\n  function b() {\n    var c, d, f, g;\n\n    _classCallCheck(this, b);\n\n    for (var h = arguments.length, k = Array(h), l = 0; l < h; l++) {\n      k[l] = arguments[l];\n    }\n\n    return g = (d = (f = _possibleConstructorReturn(this, (c = b.__proto__ || Object.getPrototypeOf(b)).call.apply(c, [this].concat(k))), f), f.state = {\n      selectionStarted: !1,\n      startRow: null,\n      startColumn: null,\n      endRow: null,\n      endColumn: null,\n      addMode: null\n    }, f.componentDidMount = function () {\n      window.addEventListener(\"mouseup\", f.handleTouchEndWindow), window.addEventListener(\"touchend\", f.handleTouchEndWindow);\n    }, f.componentWillUnmount = function () {\n      window.removeEventListener(\"mouseup\", f.handleTouchEndWindow), window.removeEventListener(\"touchend\", f.handleTouchEndWindow);\n    }, f.render = function () {\n      var m = f.props,\n          n = m.value,\n          o = m.onChange,\n          p = _objectWithoutProperties(m, [\"value\", \"onChange\"]);\n\n      return _react2.default.createElement(\"table\", _extends({\n        className: \"table-drag-select\"\n      }, p), _react2.default.createElement(\"tbody\", null, f.renderRows()));\n    }, f.renderRows = function () {\n      return _react2.default.Children.map(f.props.children, function (m, n) {\n        return _react2.default.createElement(\"tr\", _extends({\n          key: n\n        }, m.props), _react2.default.Children.map(m.props.children, function (o, p) {\n          return _react2.default.createElement(Cell, _extends({\n            key: p,\n            onTouchStart: f.handleTouchStartCell,\n            onTouchMove: f.handleTouchMoveCell,\n            selected: f.props.value[n][p],\n            beingSelected: f.isCellBeingSelected(n, p)\n          }, o.props), o.props.children);\n        }));\n      });\n    }, f.handleTouchStartCell = function (m) {\n      var n = 0 === m.button,\n          o = \"mousedown\" !== m.type;\n\n      if (!f.state.selectionStarted && (n || o)) {\n        m.preventDefault();\n        var p = eventToCellLocation(m),\n            q = p.row,\n            r = p.column;\n        f.setState({\n          selectionStarted: !0,\n          startRow: q,\n          startColumn: r,\n          endRow: q,\n          endColumn: r,\n          addMode: !f.props.value[q][r]\n        });\n      }\n    }, f.handleTouchMoveCell = function (m) {\n      if (f.state.selectionStarted) {\n        m.preventDefault();\n        var n = eventToCellLocation(m),\n            o = n.row,\n            p = n.column;\n        f.setState({\n          endRow: o,\n          endColumn: p\n        });\n      }\n    }, f.handleTouchEndWindow = function (m) {\n      var n = 0 === m.button,\n          o = \"mousedown\" !== m.type;\n\n      if (f.state.selectionStarted && (n || o)) {\n        for (var p = (0, _clone2.default)(f.props.value), q = _Mathmin(f.state.startRow, f.state.endRow), r = _Mathmax(f.state.startRow, f.state.endRow), s = q; s <= r; s++) {\n          for (var t = _Mathmin(f.state.startColumn, f.state.endColumn), u = _Mathmax(f.state.startColumn, f.state.endColumn), v = t; v <= u; v++) {\n            p[s][v] = f.state.addMode;\n          }\n        }\n\n        f.setState({\n          selectionStarted: !1\n        }), f.props.onChange(p);\n      }\n    }, f.isCellBeingSelected = function (m, n) {\n      var o = _Mathmin(f.state.startRow, f.state.endRow),\n          p = _Mathmax(f.state.startRow, f.state.endRow),\n          q = _Mathmin(f.state.startColumn, f.state.endColumn),\n          r = _Mathmax(f.state.startColumn, f.state.endColumn);\n\n      return f.state.selectionStarted && m >= o && m <= p && n >= q && n <= r;\n    }, d), _possibleConstructorReturn(f, g);\n  }\n\n  return _inherits(b, a), b;\n}(_react2.default.Component);\n\nTableDragSelect.propTypes = {\n  value: function value(a) {\n    var b = new Error(\"Invalid prop `value` supplied to `TableDragSelect`. Validation failed.\");\n    if (!Array.isArray(a.value)) return b;\n\n    if (0 !== a.value.length) {\n      var c = a.value[0].length,\n          d = !0,\n          f = !1,\n          g = void 0;\n\n      try {\n        for (var k, q, h = a.value[Symbol.iterator](); !(d = (k = h.next()).done); d = !0) {\n          if (q = k.value, !Array.isArray(q) || q.length !== c) return b;\n          var l = !0,\n              m = !1,\n              n = void 0;\n\n          try {\n            for (var p, r, o = q[Symbol.iterator](); !(l = (p = o.next()).done); l = !0) {\n              if (r = p.value, \"boolean\" != typeof r) return b;\n            }\n          } catch (r) {\n            m = !0, n = r;\n          } finally {\n            try {\n              !l && o.return && o.return();\n            } finally {\n              if (m) throw n;\n            }\n          }\n        }\n      } catch (q) {\n        f = !0, g = q;\n      } finally {\n        try {\n          !d && h.return && h.return();\n        } finally {\n          if (f) throw g;\n        }\n      }\n    }\n  },\n  onChange: _propTypes2.default.func,\n  children: function children(a) {\n    if (!TableDragSelect.propTypes.value(a)) {\n      var b = new Error(\"Invalid prop `children` supplied to `TableDragSelect`. Validation failed.\"),\n          c = _react2.default.Children.toArray(a.children),\n          d = a.value.length,\n          f = 0 === a.value.length ? 0 : a.value[0].length;\n\n      if (c.length !== d) return b;\n      var g = !0,\n          h = !1,\n          k = void 0;\n\n      try {\n        for (var m, l = c[Symbol.iterator](); !(g = (m = l.next()).done); g = !0) {\n          var s = m.value,\n              t = _react2.default.Children.toArray(s.props.children);\n\n          if (\"tr\" !== s.type || t.length !== f) return b;\n          var n = !0,\n              o = !1,\n              p = void 0;\n\n          try {\n            for (var r, u, q = t[Symbol.iterator](); !(n = (r = q.next()).done); n = !0) {\n              if (u = r.value, \"td\" !== u.type) return b;\n            }\n          } catch (u) {\n            o = !0, p = u;\n          } finally {\n            try {\n              !n && q.return && q.return();\n            } finally {\n              if (o) throw p;\n            }\n          }\n        }\n      } catch (s) {\n        h = !0, k = s;\n      } finally {\n        try {\n          !g && l.return && l.return();\n        } finally {\n          if (h) throw k;\n        }\n      }\n    }\n  }\n}, TableDragSelect.defaultProps = {\n  value: [],\n  onChange: function onChange() {}\n}, exports.default = TableDragSelect;\n\nvar Cell = function (a) {\n  function b() {\n    var c, d, f, g;\n\n    _classCallCheck(this, b);\n\n    for (var h = arguments.length, k = Array(h), l = 0; l < h; l++) {\n      k[l] = arguments[l];\n    }\n\n    return g = (d = (f = _possibleConstructorReturn(this, (c = b.__proto__ || Object.getPrototypeOf(b)).call.apply(c, [this].concat(k))), f), f.shouldComponentUpdate = function (m) {\n      return f.props.beingSelected !== m.beingSelected || f.props.selected !== m.selected;\n    }, f.componentDidMount = function () {\n      f.td.addEventListener(\"touchstart\", f.handleTouchStart, {\n        passive: !1\n      }), f.td.addEventListener(\"touchmove\", f.handleTouchMove, {\n        passive: !1\n      });\n    }, f.componentWillUnmount = function () {\n      f.td.removeEventListener(\"touchstart\", f.handleTouchStart), f.td.removeEventListener(\"touchmove\", f.handleTouchMove);\n    }, f.render = function () {\n      var m = f.props,\n          n = m.className,\n          o = m.disabled,\n          p = m.beingSelected,\n          q = m.selected,\n          r = m.onTouchStart,\n          s = m.onTouchMove,\n          t = _objectWithoutProperties(m, [\"className\", \"disabled\", \"beingSelected\", \"selected\", \"onTouchStart\", \"onTouchMove\"]);\n\n      return o ? n += \" cell-disabled\" : (n += \" cell-enabled\", q && (n += \" cell-selected\"), p && (n += \" cell-being-selected\")), _react2.default.createElement(\"td\", _extends({\n        ref: function ref(u) {\n          return f.td = u;\n        },\n        className: n,\n        onMouseDown: f.handleTouchStart,\n        onMouseMove: f.handleTouchMove\n      }, t), f.props.children || _react2.default.createElement(\"span\", null, \"\\xA0\"));\n    }, f.handleTouchStart = function (m) {\n      f.props.disabled || f.props.onTouchStart(m);\n    }, f.handleTouchMove = function (m) {\n      f.props.disabled || f.props.onTouchMove(m);\n    }, d), _possibleConstructorReturn(f, g);\n  }\n\n  return _inherits(b, a), b;\n}(_react2.default.Component),\n    eventToCellLocation = function eventToCellLocation(a) {\n  var b;\n\n  if (a.touches) {\n    var c = a.touches[0];\n    b = document.elementFromPoint(c.clientX, c.clientY);\n  } else for (b = a.target; \"TD\" !== b.tagName;) {\n    b = b.parentNode;\n  }\n\n  return {\n    row: b.parentNode.rowIndex,\n    column: b.cellIndex\n  };\n};","map":null,"metadata":{},"sourceType":"script"}